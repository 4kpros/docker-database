services:

  certs-generator:
    container_name: certs-generator
    build: 
      context: ./conf/certs
      dockerfile: ./Dockerfile
    volumes:
      - ./build/certs:/certs/build
    networks:
      - internal

  postgres:
    container_name: postgres
    image: postgres:alpine
    restart: always
    env_file: ".env"
    environment:
      POSTGRES_USER: ${POSTGRES_USERNAME}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DATABASE}
      PGDATA: /var/lib/postgresql/data
    ports:
      - ${POSTGRES_PORT:-5432}:5432
    volumes:
      - ./conf/sql/init.sql:/docker-entrypoint-initdb.d/init.sql
      - ./build/data/postgres:/var/lib/postgresql/data
    networks:
      - internal

  mongodb:
    container_name: mongodb
    image: mongo:latest
    restart: always
    env_file: ".env"
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGODB_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGODB_PASSWORD}
      MONGO_INITDB_DATABASE: ${MONGODB_DATABASE}
    ports:
      - ${MONGODB_PORT:-2701}:2701
    volumes:
      - ./conf/sql/init.sql:/docker-entrypoint-initdb.d/init.sql
      - ./build/data/mongodb:/data/db
    networks:
      - internal

  sqlserver:
    container_name: sqlserver
    image: mcr.microsoft.com/mssql/server
    restart: always
    env_file: ".env"
    environment:
      MSSQL_SA_USER: ${SQLSERVER_USERNAME}
      SA_PASSWORD: ${SQLSERVER_PASSWORD}
      MSSQL_PID: ${SQLSERVER_EDITION}
      ACCEPT_EULA: "Y"
      MSSQL_DATABASE_NAME: ${SQLSERVER_DATABASE}
    ports:
      - ${SQLSERVER_PORT:-1433}:1433
    volumes:
      - ./build/data/sqlserver:/var/opt/mssql/data
    networks:
      - internal

  redis:
    container_name: redis
    image: redis:alpine
    restart: always
    env_file: ".env"
    environment:
      REDIS_PASSWORD: ${REDIS_PASSWORD}
      REDIS_SAVE: ${REDIS_SAVE_IN_SECONDS}
    ports:
      - ${REDIS_PORT:-6379}:6379
    volumes:
      - ./build/data/redis:/data
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    networks:
      - internal
    healthcheck:
      test: ["CMD-SHELL", "redis-cli ping"]
      interval: 10s
      timeout: 5s
      retries: 3

  memcached1:
    container_name: memcached1
    image: memcached:alpine
    restart: always
    env_file: ".env"
    ports:
      - ${MEMCACHED_PORT1:-11211}:11211
    networks:
      - internal
    healthcheck:
      test: ["CMD-SHELL", "nc -zv localhost 11211"]
      interval: 10s
      timeout: 5s
      retries: 3
  memcached2:
    container_name: memcached2
    image: memcached:alpine
    restart: always
    env_file: ".env"
    ports:
      - ${MEMCACHED_PORT2:-11212}:11211
    networks:
      - internal
    healthcheck:
      test: ["CMD-SHELL", "nc -zv localhost 11211"]
      interval: 10s
      timeout: 5s
      retries: 3
  memcached3:
    container_name: memcached3
    image: memcached:alpine
    restart: always
    env_file: ".env"
    ports:
      - ${MEMCACHED_PORT3:-11213}:11211
    networks:
      - internal
    healthcheck:
      test: ["CMD-SHELL", "nc -zv localhost 11211"]
      interval: 10s
      timeout: 5s
      retries: 3
  memcached4:
    container_name: memcached4
    image: memcached:alpine
    restart: always
    env_file: ".env"
    ports:
      - ${MEMCACHED_PORT4:-11214}:11211
    networks:
      - internal
    healthcheck:
      test: ["CMD-SHELL", "nc -zv localhost 11211"]
      interval: 10s
      timeout: 5s
      retries: 3
  memcached5:
    container_name: memcached5
    image: memcached:alpine
    restart: always
    env_file: ".env"
    ports:
      - ${MEMCACHED_PORT5:-11215}:11211
    networks:
      - internal
    healthcheck:
      test: ["CMD-SHELL", "nc -zv localhost 11211"]
      interval: 10s
      timeout: 5s
      retries: 3

  etcd:
    container_name: etcd
    image: bitnami/etcd:latest
    restart: always
    env_file: ".env"
    environment:
      ETCD_NAME: etcd
      ETCD_DATA_DIR: /var/lib/etcd
      ETCD_SNAPSHOT_COUNT: 10000
      ETCD_USER: ${ETCD_USERNAME}
      ETCD_PASSWORD: ${ETCD_PASSWORD}
      ALLOW_NONE_AUTHENTICATION: false
      ETCD_SERVER_CERT_FILE: /etc/etcd/ssl/server.crt
      ETCD_SERVER_KEY_FILE: /etc/etcd/ssl/server.key
      ETCD_CLIENT_CERT_AUTH: true
      ETCD_CLIENT_CERT_FILE: /etc/etcd/ssl/client.crt
      ETCD_CLIENT_KEY_FILE: /etc/etcd/ssl/client.key
      ETCD_ADVERTISE_CLIENT_URLS: https://${LOCAL_HOSTNAME}:2379
      ETCD_ADVERTISE_PEER_URLS: https://${LOCAL_HOSTNAME}:2380
    ports:
      - ${ETCD_INITIAL_PORT:-2379}:2379
      - ${ETCD_LISTEN_PORT:-2380}:2380
    volumes:
      - ./build/data/etcd:/var/lib/etcd
      - ./build/certs:/etc/etcd/ssl
    command: etcd
    networks:
      - internal
    healthcheck:
      test: ["CMD", "etcdctl", "member", "list"]
      interval: 10s
      timeout: 5s
      retries: 3

networks:
    internal:
